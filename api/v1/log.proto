//specify that we’re using proto3 syntax
syntax = "proto3";
/*
Then we specify a package name for two reasons:
because this protobuf package name is used as the package name in the
generated Go code and because it prevents name clashes between protocol
message types that have the same name.
 */
package log.v1;

option go_package = "godistrserv/api/log_v1";
/*
with protobuf you put the name of the field on right followed by
its name (with an additional
field ID).
Following
 */
message Record {
  bytes value = 1;
  uint64 offset = 2;
}

service Log {
  rpc Produce(ProduceRequest) returns (ProduceResponse) {}
  rpc Consume(ConsumeRequest) returns (ConsumeResponse) {}
  //ConsumeStream—a server-side streaming RPC where the client sends a
  //request to the server and gets back a stream to read a sequence of messages.
  rpc ConsumeStream(ConsumeRequest) returns (stream ConsumeResponse) {}
  //ProduceStream—a bidirectional streaming RPC where both the client and
  //server send a sequence of messages using a read-write stream.
  rpc ProduceStream(stream ProduceRequest) returns (stream ProduceResponse) {}
}

message ProduceRequest {
  Record record = 1;
}

message ProduceResponse{
    uint64 offset = 1;
}

message ConsumeRequest {
  uint64 offset = 1;
}

message ConsumeResponse {
  Record record = 2;
}
